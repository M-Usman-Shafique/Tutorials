⁡⁣⁢⁣REACT: ⁡A JavaScript library use to make UIs of websites & singl-page web applications by using component-based approach. 
⁡⁢⁣⁣Declarative:⁡ A programming paradigm where developers describe what they want to achieve (UI), rather than specifying how to achieve it (DOM manupulation).
⁡⁢⁣⁣Imperative:⁡ Explicitly defining the step-by-step instructions to achieve a desired outcome.
⁡⁢⁣⁣Libray:⁡
1. Less rules.
2. Developer is incharge to choose when & where to call the library.
3. More customization is possible.
⁡⁢⁣⁣Framework:⁡
1. Strict rules
2. Framwork is incharge as it provides some places, only where you can call your code.
3. Less customization
⁡⁣⁢⁣JSX:⁡ JavaScript XML (Extensible Markup Language):⁡ Modern syntax convention to write HTML & JavaScript code together which defines the structure of UI components.
⁡⁣⁢⁣BABEL:⁡ JS compiler which onverts JSX into normal JS code to make it understandable for browser.
⁡⁢⁣⁢Note:⁡⁡ Always write JS expression inside curly braces:
const task = 2;
<h1> Task: {task} </h1>
output: Task: 2
⁡⁣⁢⁣COMPONENTS:⁡ Reusable building blocks of an application's UI.
⁡⁣⁢⁣Types:⁡
⁡⁣⁣⁢1. Class Components:⁡ Simple JS classes that extend 'React.component' & have a render() method which returns JSX.
⁡⁢⁣⁣React.component:⁡⁡ A base class in React that is used to create class components. It provides methods & properties that allow a component to manage its state & lifecycle.
⁡⁢⁣⁣State:⁡⁡ A built-in object in react which holds data or information about the component. Any change in the state causes the component to re-render to reflect new state in UI.
⁡⁢⁣⁣State Management:⁡⁡ Local state of a class component can be initialized & managed using 'this.state'.
⁡⁣⁣⁡⁢⁣⁣State Update:⁡⁡ State can be updated using this.setState() which triggers a re-render of the component.
⁡⁢⁣⁣RENDERING:⁡⁡ Process of converting JSX components into React elements using createElement() method. React elements are basically JS objects which define the structure of UI.
⁡⁢⁣⁣RE-RENDERING:⁡
⁡⁣⁢⁢State Variables & Props:⁡ They create a demand for change/update in the UI. When such a demand occurs, React identifies all components that need to be updated & re-renders them to create new React elements.
⁡⁢⁣⁡⁣⁢⁢Virtual DOM:⁡⁡ During the re-render, React creates a virtual DOM tree which represents how the original DOM & UI should look like after commiting changes.
⁡⁢⁣⁡⁣⁢⁢Reconciliation:⁡⁡ React compares the new virtual DOM (created during the current render) with the previous virtual DOM (created during the last render) using diffing algorithm to identify the necessary updates.
⁡⁣⁢⁢Commit:⁡⁡ Based on its identification during reconciliation, React applies the necessary changes to the actual DOM to update UI.
⁡⁢⁣⁣Exmp:⁡
class Counter extends React.Component {
  constructor () {
     super();
     this.state = {count: 0}
  }
    increment = () => {
    this.setState(() => { count: count + 1 });
  }
  render() {
    return <h2> Count: {count} </h2>;
  }
}

⁡⁢⁣⁣LIFECYCLE:⁡ Phases through which each react component passes & during each phase certain methods are called.
⁡⁢⁣⁣Phases:⁡
⁡⁢⁣⁢1. Mounting:⁡ Phase in which instance of React component is created & inserted into the DOM.
  ⁡⁢⁢⁢ ⁡⁣⁢⁢a. constructor():⁡⁡ It is called before a react component is mounted:
      1. State initialization (this.state) by calling super() method.
      2. Binding event handler methods to the instance.
      Note: If you dont't initialize state & don't bind any event handler then there's no need to use constructor().
  ⁡⁣⁢⁢ b. static getDerivedStateFromProps():⁡ This method is called right before rendering when new props or state are received. It returns an object to update the state & returns null if no state update is necessary.
   ⁡⁣⁢⁢c. render():⁡ Only essential method in class component responsible for rendering.
   ⁡⁣⁢⁢d. componentDidMount():⁡ This method is called right after the component is mounted to the DOM. It is commonly used to perform side effects like;
      1. Data fetching (loading) from API by making network requests.
      2. DOM Manipulation
      3. Integrating with third-party libraries & frameworks.
⁡⁢⁣⁢2. Updating:⁡ The process in which component re-renders & update due to change in state or props.
  ⁡⁣⁢⁢ a. static getDerivedStateFromProps()
   b. shouldComponentUpdate()⁡⁣⁢⁢:⁡ This method also called before rendering & used for performance optimization by preventing unnecessary re-renders of components when their output would not be affected by the change in state or props.
   ⁡⁣⁢⁢c. render()⁡
   ⁡⁣⁢⁢d. getSnapshotBeforeUpdate()⁡⁣⁢⁢:⁡ This method invoked right after rendering, before committing changes to the DOM. It enables your component to capture some information (e.g. scroll position) from the DOM before it is changed.
   ⁡⁣⁢⁡⁣⁢⁢e. componentDidUpdate(): ⁡This method is called right after the component is updated in the DOM. It is commonly used for performing side effects like fetching data from API & DOM manipulation based on changes in props/state.
⁡⁢⁣⁢3. Unmounting:⁡ The process in which component is removed from the DOM.
⁡⁣⁢⁢   componentWillUnmount():⁡ This method is called right before the component
   is removed from the DOM. It is used for cleanup such as cancelling network requests, clearing timers & removing event listeners.
⁡⁢⁣⁣Use of Lifecycle Methods:⁡
1. Initialization & State Management: constructor()
2. Side Effects: componentDidMount() & componentDidUpdate()
3. Performance Optimization: shouldComponentUpdate()
4. Cleanup: componentWillUnmount()


⁡⁢⁣⁢Note:⁡ Whenever, parent component is rendered it renders all its child components as well.

⁡⁣⁣⁢2. Function Components:⁡ JS functions which return JSX. They use hooks for state management.
function Car() {
  return <h2>I am a car!</h2>;
}
⁡⁢⁣⁣Rendering Function Component:⁡
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car />);

Passing 'props' to function components is like passing arguments in JS functions:
function Car(props) {
    return <h1>I am a {props.color} car!</h1>
}
And setting props' value to components is like HTML attributes.
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car color="red"/>);

⁡⁢⁣⁣Component inside another Component:⁡
function Garage() {
  return (
    <>
      <h1>Who lives in my Garage?</h1>
      <Car />
    </>
  );
}

⁡⁢⁣⁣Passing 'props' from One Component to Another:⁡
function Garage() {
  return (
    <>
      <h1>Who lives in my garage?</h1>
      <Car brand="Toyota" />
    </>
  )
}
function Car(props) {
  return <h2>I am a { props.brand }!</h2>
}
⁡⁢⁣⁣Passing Variable:⁡
function Garage() {
    let brandName = "Toyota";
  return (
    <>
      <h1>Who lives in my garage?</h1>
      <Car brand={ brandName } />
    </>
  )
}
⁡⁢⁣⁣Passing Object:⁡
function Garage() {
    const carInfo = { name: "Toyota", model: "Yaris" };
  return (
    <>
      <h1>Who lives in my garage?</h1>
      <Car brand={ carInfo } />
    </>
  )
}
⁡⁢⁣⁢Note:⁡ Instead of normal loop, map() loop is used in the return of function component.
⁡⁢⁣⁢List & Keys:⁡⁡ Keys allows React to keep track of elements. Otherwise while updating or removing an element of list, React will render the entire list.

⁡
⁡⁢⁣⁣COMPOSITION:⁡ Making complex UIs by nesting & combining smaller, reusable components. It is considered as an alternative of inheritance in React.⁡
⁡⁣⁣⁢1. Props:⁡⁡⁡ Properties pass as arguments into React components to pass data from parent to child components.
⁡⁣   ⁢⁡⁣⁢⁢Difference between State & Props:⁡
   1.  Props are immutable, meaning once they are set by the parent, the child component cannot modify them. Whereas, state is mutable, meaning it can be modified using setState() method (in class components) & using useState hook (in functional components).
   2. Props controls the component externally while state controls internally.
⁡⁢⁣⁡⁣⁣⁢2. Children Props:⁡⁡ Passing data from parent to child between opening & closing tags of a component. Children can receive this data using props.children or { children }.
   Export File:
   <Message username="Usman">Salman</Message>    // Usman is props & Salman is children props!
   Import File:
   function Message(props) {
      return (
        <div>
        <h1>Hello {props.username}</h1>        // output: Hello Usman
        <h1>Welcome {props.children}</h1>     // output: Welcome Salman  
        </div>
      )
   }
We can write the above code by destructuring as well:
function Message({ username, children }) {
  return (
        <div>
        <h1>Hello {username}</h1>      // output: Hello Usman
        <h1>Welcome {children}</h1>   // output: Welcome Salman 
        </div>
  )
}
⁡⁢⁣⁡⁣⁣⁢3. High Order Components (HOCs):⁡⁡ Sharing logic between components using 'props' whose value is a component. HOC is a function which takes a component & returns another component.
⁡⁢⁣⁣Benefits:⁡ Reusability, Enhancement, Testing and Debugging.
⁡⁣⁣⁢4. Render Props:⁡ Sharing logic between components using 'props' whose value is function.
⁡⁣⁣⁢5. Context API:⁡ Sharing data between multi-levels of components using useContext hook, without explicitly passing props through each component.

⁡⁢⁣⁣CONDITIONAL RENDERING:⁡
function Profile() {
    const [login, setlogin] = useState(3);
    const [user1, setuser1] = useState("Usman");
    const [user2, setuser2] = useState("Noman");
    const [user3, setuser3] = useState("Salman");
  return (
        <div>
        {login === 1 ? `Welcome ${user1}` : login === 2 ? `Welcome ${user2}` : `Welcome ${user3}`}
        </div>
  )
}

⁡⁢⁣⁡⁢⁣⁢Refs:⁡⁡ Provide a way to access DOM nodes & React elements.

⁡⁣⁢⁣HOOKS:⁡ Functions that allow us to use React’s features (state management, lifecycle methods & performing side effects) in functional components without writing a class.

⁡⁣⁣⁢1. useState():⁡ used to add & manage the state of a component. It returns an array. First element of array is a variable & second element is modifier function for that variable.
⁡⁢⁣⁣Diff. between Normal & State Variables:⁡
1. State variables are declared & initialized by destructuring.
2. Normal variables cannot trigger re-render of the component, therefore, state cannot be managed through normal variables.

⁡⁣⁣⁢2. useEffect():⁡ used to handle side effects which was done using lifecycle methods in class components. It's a close replacement for componentDidMount, componentDidUpdate & componentWillUnmount combined.
⁡⁢⁣⁣Side Effects:⁡ Anything that happens beyond the function's expected behavior (computing & returning a value).
1. Fetching Data from a Server
2. Manually Updating DOM
3. Printing on the console
4. Setting & Clearing Timers
⁡⁢⁣⁣Syntax:⁡ useEffect(callback, [array of dependency variables])
Callback function tells what to run & dependency tells when to run.
⁡⁢⁣⁣Dependency:⁡
If no dependencies are passed, useEffect is first invoked when a component mounts & then invoked at every update in the component.
If we pass an empty array as dependency, useEffect will be invoked only once.

⁡⁣⁣⁢3. useLayoutEffect():⁡ similar with useEffect in syntax & handling side effects, used to measure DOM nodes or performing layout calculations.
⁡⁢⁣⁣Diff. between useEffect() & useLayoutEffect():⁡
1. useLayoutEffect() is invoked before DOM is printed on browser while useEffect is invoked after.
2. useEffect can handle async. operations while useLayoutEffect cannot because asynchronous operations wouldn't complete before the DOM is printed on browser.

⁡⁣⁣⁢4. useContext():⁡ To share values between multi-levels of components without passing props through each level.

⁡⁣⁣⁢5. useRef():⁡ To directly access DOM elements & for creating mutable variables which do not re-render the component.

⁡⁣⁣⁢6. useReducer:⁡ similar to useState but manages more complex states when new state depends on the previous state.
It takes a reducer function & initial state as arguments & returns the new state & a dispatch function.
let [newState, dispatch] = useReducer(reducer, initialState)
⁡⁢⁣⁣Reducer:⁡ it takes current state & action as arguments & returns new state.
newState = reducer(currentState, action)
⁡⁢⁣⁣Dispatch:⁡ used to send actions to the reducer. When an action is dispatched, the reducer processes it & returns the new state.

⁡⁣⁣⁢7. useMemo():⁡ used for performance optimization by memoizing result/value of expensive calculations to avoid unnecessary re-renders.
⁡⁢⁣⁣Diff. b/w useMemo() & useEffect():⁡
1. useMemo stops the unwanted rendering of a specific part of a component while useEffect stops the unwanted rendering of the whole component.
2. In useEffect, value cannot be returned & stored in variable unlike useMemo.

⁡⁣⁣⁢8. useCallback():⁡ used for performance optimization by memoizing functions to prevent them from being re-created & re-rendered.
⁡⁢⁣⁣Diff. b/w useMemo() & useCallback():⁡
1. useMemo returns memoize result/value while useCallback returns memoize function.
2. Parameter can be passed in usecallback unlike useMemo.
3. When we have to pass the function to another component, useCallback is the solution because only it prevents the child component from useless re-rendering.

⁡⁣⁢⁣ROUTING:⁡⁡ Navigating between different pages (URLs) of a React application.
Most common library used for routing in React is 'react-router-dom'.

⁡⁢⁣⁡⁣⁣⁢9. useParam():⁡⁡ used to manage dynamic routing which means if a URL has multiple parameters (e.g. '/users/:id'), they can be accessed using useParam() hook.

⁡⁣⁣⁢10. useLocation():⁡⁡ used to access the current location (URL) of a react component at any moment. It contains various properties such as pathname, search, hash etc.

⁡⁢⁣⁡⁣⁣⁢11. UseNavigate():⁡⁡ used to redirect the user to different pages (routes) within a react application.

⁡⁢⁣⁡⁣⁣⁢12. useId():⁡⁡ used to generate unique id. While mapping lists in React, giving each item a unique id is a must because it helps React to identify that which items have changed, been added, or been removed from the list, allowing it to update the UI more efficiently.

⁡⁣⁣⁢Custom Hooks:⁡⁡ To share logic between different components by making reusable functions.
⁡⁢⁣⁣Syntax:⁡ const data = useSomething()

⁡⁣⁢⁣Link vs. NavLink:⁡ Link provides a basic link to any URL, while NavLink offers additional features (i.e. styling active links) that can enhance the user experience.

⁡⁣⁢⁣API⁡ ⁡⁣⁢⁣(Restaurant Analogy)⁡:⁡
Client: Customer
Browser: Table
API: Waiter
Server: Kitchen

⁡⁣⁢⁣AXIOS:⁡⁡ A package used to make HTTP requests (calling an API). AXIOS do in react what Fetch API does in JavaScript.

⁡⁣⁢⁣Bundling:⁡ Combining multiple JS files & their dependencies (CSS files, images) into a single file using module bundlers i.e. Webpack, Parcel, Rollup etc.

⁡⁣⁢⁣CHUNKING/CODE SPLITTING:⁡ All components of a react application are bundled into one single file called bundle.js. This allows the browser to download the entire app. once. Large applications have large bundle size which causes the app. to have long initial load time.
Splitting single bundle into smaller ones to optimize loading performance of large size applications.

⁡⁢⁣⁣1. Dynamic Import:⁡ In traditional import statements, modules are loaded synchronously at compile time. But using dynamic import, modules can be imported conditionaly, on-demand & asynchronously at runtime.

⁡⁢⁣⁣2. Lazy Loading:⁡ Delaying the loading of certain components of an application until they are actually needed to optimize app. performance.
⁡⁣⁣⁢Suspense:⁡⁡ React component used to handle asynchronous operations such as data fetching, loading chunks of code via lazy loading. It displayed a fallback content on UI while waiting for the asynchronous operation to complete.

⁡⁣⁢⁣REDUX:⁡ Data & state management library for complex JavaScritp applications .
Working:
⁡⁢⁣⁣1. ACTION:⁡ User instructions that describe what should happen in the application.
⁡⁢⁣⁣2. STORE:⁡ Takes actions & give it to Reducer function.
⁡⁢⁣⁣3. DISPATCH:⁡ A method available on the store to send actions to the reducer.
⁡⁢⁣⁣4. REDUCER:⁡ Function that takes two arguments (current state & an action), perform operations & returns new state as result.
Steps to Implement Redux:
1. Designing store: By making an object contains all actions/task in property-value pair.
2. Listing our actions:
   a. Add task
   b. Remove task
   c. Task Completed
3. Creating reducer function.
4. Creating redux store.


⁡⁣⁢⁣FORMIK:⁡ Form Handling
⁡⁣⁢⁣YUP:⁡ Form Validation



SSR vs. CSR:
SEO is very poor in React because search engine searches for sementics/keywords in HTML file, while in React, HTML file has only one (div tag) root element.
DX in React is Good.
But compromises UX & SEO.
Hydration: Attaching event listeners to the elements to make them interactable.
